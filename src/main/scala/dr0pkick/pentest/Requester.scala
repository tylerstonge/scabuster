package dr0pkick.pentest

import java.io.PrintStream
import java.net.Socket

import scala.io.BufferedSource
import scala.util.matching.Regex

class Requester(val host: String, val directory: String, val sockets: SocketPool) extends Runnable {

  override def run(): Unit = {
    var success: Boolean = false
    var attempts = 0
    var socket: Socket = sockets.get()
    while (!success) {
      try {
        lazy val in = new BufferedSource(socket.getInputStream).getLines()
        val out = new PrintStream(socket.getOutputStream)

        out.print("HEAD /%s HTTP/1.1\r\nHost: %s\r\n\r\n".format(directory, host))
        out.flush()

        val Requester.regex(responseCode) = in.next()
        if (responseCode.startsWith("2") | responseCode.startsWith("3")) {
          println("[+] FOUND /%s (STAT: %s)".format(directory, responseCode))
        }

        sockets.put(socket)
        success = true
      } catch {
        case e: Throwable => {
          if (Scabuster.verbose) println("[!] error, retrying /%s".format(directory))
          if (attempts >= Requester.attempts) {
            println("[!] error, skipping /%s".format(directory))
            success = true
          } else {
            attempts += 1
            socket = new Socket(socket.getInetAddress, socket.getPort)
          }
        }
      }
    }
  }
}

object Requester {
  private val regex: Regex = """^(?:HTTP|http)\/\d\.\d\W(\d{3}).*$""".r
  private val attempts: Int = 3
}
